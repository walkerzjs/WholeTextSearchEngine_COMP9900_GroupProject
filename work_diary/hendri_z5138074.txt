Week 2

Created team named CS-IT-Project on both Bitbucket and Trello. Linked Trello to Bitbucket. Just started familiarising using Bitbucket such as messing around with the branch permissions. Will add more members to the team once they have an account on Bitbucket.

Week 4

From week 3 to week 4, we finished the proposal and I am the one responsible for submitting it using give. From the suggestions given from the team members, I did some edits and submitted before the due date and time. On the submission date itself, we meet up as a team to come up with the final draft proposal. During the lab, we presented our proposal to the tutor and asked some questions regarding the agile method in doing this project. We have already separated the works as well such as the user interface, data extraction, and calculating similarity. Seeing that everyone has created their personal zID branch, I set up the branch permissions for everyone so that no one can unintentionally do commit in the branch that is not theirs. For the Trello, we will have separate list for to do's such as to do for iteration 1 and to do for iteration 2. The features list will have our list of feature that can be added later on in the next iteration. Somewhere around week 2 to week 3, I have added CS9900 to Bitbucket and Trello.

Week 5

Working on dimension reduction that can reduce the vector columns from using TF-IDF. This will make computing of similarity faster and more efficient. Dimension reduction will be implemented using open sourced machine learning library for iteration 1. The library that is used will be PCA and SVD from scikit-learn.

Week 6

We did demo this week. Basic features are already implemented and we thought of adding more features. The dimension reduction I implemented is for the SVD instead of the mentioned PCA which I did not yet implemented. We requested for test cases to match the results of our similarity accuracy but was not yet given. We will be using SVD for now until we have further recommendations. We added features such as login for the next iteration. In my previous project, we implemented similar feature so I based the codes I just committed from there without adding the templates yet. I will discuss the login feature with the Stanley which is supposedly responsible for the user interface. Hossein will be expected to work on login as well. We thought of doing database to store registered users credential but we should be able to make it by iteration 3 (currently we are in iteration 2). Having this login feature, we must think how to make use of it. Maybe we can save search history made by the user and store marked favourite cases by the user as well.

The virtualenv instruction I screenshot from a previous course I took is useful as well. I did test the virtualenv by installing virtualenv in our repo folder and running it. After running it, it is needed to install the required packages such as sklearn, jinja2, etc. This will make sure the version packages are suitable for our project code to run in and avoid version conflicts. To initialise our vectors, we need to run init.py integrated by Jacob. init.py does not return anything and after it finished running, we can run our searchEngine.py and upload files to check for similarity from all of our datasets. I wanted to try uploading at least the virtualenv into master branch but the packages used used a lot memory so downloading and uploading from BitBucket will be excessive. We aren't able to copy all of the datasets to the master branch either. Instead, when we did the demo, I had everything set up in my laptop so we can just show the tutor. To avoid confusion between pushing, pulling, and checkout branches (which can give me error if I did not commit), I cloned our repo into another directory and set up the virtualenv in there as well as included all the datasets.

Week 10

Haven't been updating work diary for a while now. The group have been arranging meet-ups outside scheduled hours to work on the project. It is hard to work on bitbucket and the tutor defined our bitbucket branches as 'messy' because all group members have been uploading file to each other instead of committing and pushing to bitbucket. It will be hard to keep track on who is working on which part and we are trying to come up with a final version, pushing it to master, and do some bug fixing for the rest of the week and do a final demo in week 11. The initial user interface needed to be upgraded as said by a tutor probably in week 8. We came up with a whole new user interface (efforts go to Hossein) and did some adjustments in how the search result is displayed. The login function is working well even though we used some basic rules for the implementation. Login is technically unnecessary but we tried doing it as an extra feature for this project. The basic rules will be that if logged is not True, then the user will be redirected to the login page. Register function is pretty simple as well because user just need to enter a username and password then it will be appended to a csv file. I had some ideas from my previous course project to implement database probably using sqlite but it is no longer possible and will be time consuming for this 1 week. The tutor also mentioned that the work diary is 'hard' to find but I initially set it out so that each member create a branch under their own zID and create a work diary by naming it as <zID>.txt. I will be trying to push everyone's work diary into master branch after we have finished debugging and reorganising our code.

Week 11

For the rest of the week until the submission of this project, the group will work on the report. I have set up a google docs page and will do final compilation after everyone finishes their part. Some members are trying to see if they can improve the performance of the app. If possible, we will go through it again and check for any bugs that we can find before submitting it in Week 12. Instead of having different versions of the app, I have set it up so that everyone just commit and pushes to master. Other branches that are almost all behind masters is considered not necessary anymore. I plan to just leave it there for record purposes. Usually after creating separate branch, if the function is working, I ask the team member to create a pull request so that it can be merged to master. After merging, the branch will be closed. But due to some members not finding git easy to use, they created branches for their own testing purposes. It is messy but I don't think it matters. Final version will only be coming from the master branch. Final compilation of work diaries, project code, makefile, etc. will be more or less like the master branch.

Week 12

As a group, we decided to finish the report by Tuesday. Since some group members may be inconvenient to come to school, we decided to 'meet online'. I did go to the usual lab time for the 'motivation' and everyone was very cooperative. We somehow finished it on Tuesday but I did a final compilation by copy and pasting from google docs to an offline word document application I am using. I just finished compiling and organising by Wednesday. I did the user documentation part and needed to screenshot the output of the app in the browser but I found some problems/bugs. After comparing and making sure with my group members that we have the same code, it looks like different machine have different compatibility issue. If a marker is reading this, please be lenient if you find some bugs. We made sure that it is fully working in one of the group member's machine. This course is good although we are 'forced' to take it. There may be some bad experience along the way but I can say this is by far the most successful project I ever had. :)